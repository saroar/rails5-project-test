User.first
u = User.first
u.admin?
u.admin
ability.can?
ability = Ability.new(user)
a = Ability.new(u)
u = User.last
a = Ability.new(u)
exit
User
User.last
User.any?
reload!
ability = Ability.new()
u = User.last
ability = Ability.new()
ability = Ability.new(u)
reload!
ability = Ability.new(u)
u.add_role "admin"
exit
User.last
u = User.last
u.inspect
u.has_role? :admin
exit
User.last
user = User.last
user.add_role "admin"
reload!
user.add_role "admin"
reload!
user.add_role "admin"
u.restroy
u.destroy
user.destroy
User.all
reload1
reload!
User.all
reload!
User.all
User.last
u = User.last
u.admin?
user.has_role? :admin
user.destroy
reload!
u = User.last
user.has_role? :admin
user.add_role "admin"
user.has_role? :admin
user.destroy
user.has_role? :admin
user
User.destroy
User.destroy_all
User.all
reload!
user.has_role? :admin
User.destroy_all
User.last
user = User.last
reload!
user = User.last
reload!
user = User.last
user.admin?
user.has_role? :admin
exit
User.last
user = User.last
user.has_role? :admin
User.destroy_all
clear
reload!
User.all
user = User.last
user.has_role? :admin
User.destory_all
user
user.destory
user.destory_all
user.delete
User.last
exit
current_user.admin?
current_user.has_role :admin
current_user.has_role? :admin
email
User.email
User
authenticate_user!
authenticate_user
authenticate_user!
Time.zone.name
Time.zone.to_s
Time.zone
params[:date].to_datetime.in_time_zone('Moscow').end_of_day
[:date].to_datetime.in_time_zone('Moscow').end_of_day
in_time_zone('Moscow').end_of_day
in_time_zone('Moscow')
in_time_zone('Moscow')DateTime.now
DateTime.now
DateTime.now.to_datetime.end_of_day
exit
@first_day
current_day
User.orders
User.order
User.orders.where()
exit
params[:date] = params[:date].present? ? params[:date].to_datetime.in_time_zone('Moscow').end_of_day : DateTime.now
params[:date]
@orders
Order.filter(params.slice(:date, :organization))
Order.filter(params.slice(nil, :organization))
date
@date
organization
:organization
:date
Order.filter(params.slice(nil, :organization))
Order.filter(params.slice(:date, :organization))
Order.filter(params.slice(@date, :organization))
@date
Date.now
Time.now
date.wday
date
Date.wday
@date
date
date.wday
date.tday
date.wday
day
Date
Date.now
DateTime.current.wday
date
date.current
date
wday
date.wday
params[:date].present? ? params[:date].to_datetime.in_time_zone('Moscow').end_of_day : DateTime.now
DateTime.now
DateTime.now.wday
date
rake -D time
params[:date].present? ? params[:date].to_datetime.in_time_zone('Moscow').end_of_day : DateTime.now
params[:date].present?
params[:date]
params[:date].to_datetime.in_time_zone('Moscow').end_of_day
DateTime.now
params[:date]
params[:date].to_datetime.end_of_day
params[:date].to_datetime.in_time_zone('Moscow').end_of_day
params[:date]
date
@date
DayMenu.actual(params[:date])
@day_menu
params[:date]
params[:date].present?
params[:date]
params[:date].present? ? params[:date].to_datetime.in_time_zone('Moscow').end_of_day : DateTime.now
DayMenu.actual(params[:date])
params[:date]
params[:date].to_datetime.in_time_zone('Moscow').end_of_day
Time.now
params[:date].present? ? params[:date].to_datetime.in_time_zone('Moscow').end_of_day : DateTime.now
params[:date]
@date
params[:date]
params[:date].present?
params[:date].to_datetime.in_time_zone('Moscow').end_of_day
DateTime.now
DateTime.now.in_time_zone(Time.zone).beginning_of_day
DateTime.now.in_time_zone(Time.zone).end_of_day
to_datetime
params[:date].to_datetime
DateTime.now.in_time_zone(Time.zone).end_of_day
params[:date].to_datetime.in_time_zone('Moscow').end_of_day
params[:date].to_datetime.in_time_zone('Moscow').end_of_dayparams[:date].to_datetime.in_time_zone(Time.zone).end_of_day
params[:date].to_datetime.in_time_zone(Time.zone).end_of_day
params[:date].in_time_zone(Time.zone).beginning_of_day.end_of_day
params[:date]
DateTime.now.in_time_zone(Time.zone).beginning_of_day
DateTime.now.in_time_zone(Time.zone).end_of_day
DateTime.now
params[:date]
params[:date].end_of_day
params[:date]
params[:date].end_of_day
params[:date].in_time_zone(Time.zone).end_of_day
DateTime.now.in_time_zone(Time.zone).end_of_day
params[:date] = params[:date].present? ? DateTime.now.in_time_zone(Time.zone).end_of_day : DateTime.now
@date = params[:date]
@date
params[:date]
params[:date]юin_time_zone.end_of_day.to_s
params[:date].in_time_zone.end_of_day.to_s
params[:date].in_time_zone.end_of_day
Time.zone = 'EST'
Time.now.end_of_day.to_s
Time.zone.now.end_of_day.to_s
params[:date].in_time_zone.end_of_day.to_s
params[:date]
params[:date].in_time_zone('Moscow').end_of_day
params[:date]
params[:date].in_time_zone('Moscow').end_of_day
params[:date]
params[:date].in_time_zone('Moscow').end_of_day
Time.zone.now.end_of_day.to_s
Time.zone.now.end_of_day
rake -D time
params[:date].in_time_zone('Moscow').end_of_day
params[:date]
params[:date].end_of_day
params[:date].in_time_zone(Time.zone.now).end_of_day
params[:date].in_time_zone('Moscow).end_of_day
params[:date].in_time_zone('Moscow').end_of_day
params[:date].in_time_zone('Moscow')
params[:date].in_time_zone('Moscow').now
params[:date].in_time_zone('Moscow').noon
params[:date].in_time_zone('Moscow').
params[:date].in_time_zone('Moscow')
params[:date]
params[:date].in_time_zone(ыуда)
params[:date].in_time_zone(self)
params[:date].in_time_zone(self).end_of_day
params[:date].in_time_zone
Time.now.in_time_zone
today
Time.now.today
Time.zone.today
Time.zone.today.in_time_zone
Time.zone.today.in_time_zone.end_of_day
exit
params[:date]
paparams[:date].to_datetime.in_time_zone('Moscow').end_of_day
params[:date].to_datetime.in_time_zone('Moscow').end_of_day
params[:date].in_time_zone('Moscow').end_of_day
DateTime.now.beginning_of_day, DateTime.now.end_of_day
exit
params[:date]
date
:date
params[:date]
params[:date].to_datetime.in_time_zone('Moscow')
params[:date].in_time_zone('Moscow')
Time.zone.now
params[:date].in_time_zone
params[:date].Time.zone.now
params[:date]
params[:date].in_time_zone
Time.zone.now
Time.zone.now.in_time_zone
Time.zone.now.to_datetime.in_time_zone('Moscow')
Time.zone.now.to_datetime.in_time_zone('Moscow').end_of_day
config.active_record.default_timezone = :local
Time.local_time
params[:date]
params[:date].to_datetime
params[:date].to_datetime.in_time_zone('Moscow')
Time.local_time
Time.now
Time.now.to_datetime
params[:date].to_datetime
params[:date].to_datetime.in_time_zone('Moscow').end_of_day
params[:date].to_datetime.in_time_zone('Moscow')
params
params.date
params[:controller]
params[:date]
params[:date].to_datetime.in_time_zone('Moscow')
current_day
Date.today.at_beginning_of_week
@first_day = Date.today.at_beginning_of_week
@first_day
@first_day.inspect
@first_day[0]
@first_day.days
@first_day.day
@date
@date.to_date
@date.to_date == Date.now
@date.to_date == Date
Day
Day.today
Date
Date.today
@orders.where(user: current_user).empty?
current_user.has_role? :admin && (@date.to_date == Date.today) && (@orders.where(user: current_user).empty?)
current_user.has_role? :admin & (@date.to_date == Date.today) & (@orders.where(user: current_user).empty?)
current_user.has_role? :admin && (@date.to_date == Date.today) && (@orders.where(user: current_user).empty?)
current_user.admin? & (@date.to_date == Date.today) & (@orders.where(user: current_user).empty?)
current_user.has_role :admin & (@date.to_date == Date.today) & (@orders.where(user: current_user).empty?)
current_user.has_role? :admin & (@date.to_date == Date.today) & (@orders.where(user: current_user).empty?)
@orders.present?
current_user.has_role? :admin && (@date.to_date == Date.today) && (@orders.where(user: current_user).empty?)
@orders.present? && current_user.admin? & (@date.to_date == Date.today) & (@orders.where(user: current_user).empty?)
(current_user.has_role? :admin) && (@date.to_date == Date.today) && (@orders.where(user: current_user).empty?)
@date.to_date == Date.today
@orders.where(user: current_user).empty?
Order
order
Order.last
o = Order.last
o
o.user
o.item
o.items
o.item_associations
o.item_association
o.item_associations
o.item
o.items
o.item_associations
Order.destroy_all
clear
reload!
Order.last
exit
params
Order.last.items
Order.destroy_all
relaod!
reload!
Order.destroy_all
учше
eixt
exit
params
Order.last
Order.last.items
Order.destroy_all
exit
User.last
reload!
User.last
User.last.has_role? :admin
u = User.last
u.has_role? :admin
u.has_role :admin
u.has_role? :admin
u.destroy
u.destroy_all
reload!
User.destroy_all
User
User.last
User.last.destroy_all
User.last.destroy
had_order?
@orders.present?
@orders
Order.last
@orders.present?
Order.last
Order.last.items
Order.last.item_associations
Order.last.destroy
Order.last
Order.last.user
Order.last
Order.last.destroy
exit
@orders
Order.last
Order.present?
@order
@order.present?
@orders
Order.filter(params.slice(:date, :organization))
@orders.where(user: current_user) unless current_user.has_role? :admin
Order.destryo_all
Order.destroy_all
Items.destory_all
Item.destory_all
Items
Order
Order.all
Item
Item.all
Item.destroy_all
ItemAssociation
ItemAssociation.all
Menu
Menu.destroy_all
DayMenu
DayMenu.destory_all
DayMenu.all
DayMenu.destroy_all
clear
reload!
Order.all
Order.all.items
Order.all.ite
Order.all.item
Order.all.user
Order.last
Order.last.user
Order.last.item
Order.last.items
Order.last.item
reload!
Order.last.item
Order.last
Order.last.item
Order.last.items
Order.last.items.destroy_all
Order.destory_all
Order.last
Order.last.destroy_all
Order.last.destroy
Order.all
exit
Order.last.destroy
exit
Order.last.destroy
eixt
clear
exit
User.all
exit
User.all
exit
User.last
User.last.destroy
reload!
User.last
exit
Order.all.destroy
Order.all.destroy_all
exit
value
item
value.map { |item| item.menu.id }
item_menu_ids = value.map { |item| item.menu.id }
menu_ids = DayMenu.actual(DateTime.now).items.map { |item| item.menu.id }
menu_ids.uniq
item_menu_ids.uniq
params
current_user.orders.build(order_params)
current_user.orders
current_user.orders.build(order_params)
current_user.orders.create(order_params)
DayMenu
DayMenu.actual(DateTime.now).items.map { |item| item.id }
DayMenu.all
DayMenu.items
DayMenu
menu_items_ids
menu_items_ids = 
DayMenu.actual(DateTime.now).items.map { |item| item.id }
menu_items_ids
order_item_ids = value.map { |item| item.id }
DayMenu.actual(DateTime.now)
DayMenu.actual(DateTime.now).items
DayMenu.actual(DataTime.now).items.map { |item| item.menu.id }
DayMenu.actual(DateTime.now).items.map { |item| item.menu.id }
Order.last.destroy
clear
Order.last.destroy
Order.last
Order.last.destroy
Order.last
current_user.orders.build(order_params)
Order.last.destroy
Order.last
reoad!
reload!
current_user.orders.create!(order_params)
curren_user
current_user
current_user.orders
current_user.orders.create(order_params)
current_user.orders.build(order_params)
current_user.orders.find_or_initialize_by(order_params)
current_user.orders.build(order_params)
current_user.orders.build!(order_params)
current_user.orders.create(order_params)
Order.last
Order.last.destroy
reload!
Order.last
Order.last.destroy
Order.last
Order.last.destroy
reload!
Order.last
User.last
reload!
Order.last.destroy
reload!
Order.last
Order.last.destroy
reload!
exit
user_signed_in_with_token?
@auth_current_user
User.find_by(auth_token: request.headers['Authorization'])
учше
eixt
user_signed_in_with_token?
@auth_current_user
user_signed_in_with_token?
@auth_current_user
user_signed_in_with_token?
@auth_current_user
user_signed_in_with_token?
@auth_current_user
user_signed_in_with_token?
current_user
@auth_current_user
user_signed_in_with_token?
@auth_current_user
JSON.parse(response.body, symbolize_names: true)
user_response = JSON.parse(response.body, symbolize_names: true)
expect(user_response[:user][:email]).to eql @user.email
user_response[:user][:email]
user
[:user]
[:email]
user_response = JSON.parse(response.body, symbolize_names: true)
response
FactoryGirl.create :user
get :show, id: @user.id, format: :json
user_response = JSON.parse(response.body, symbolize_names: true)
expect(user_response[:user][:email]).to eql @user.email
user_response = JSON.parse(response.body, symbolize_names: true)
JSON.parse(response.body, symbolize_names: true)
JSON.parse
JSON.parse(response.body)
response
JSON.parse(response.body, symbolize_names: true)
response
JSON.parse(response.body, symbolize_names: true)
@user
FactoryGirl.build(:user)
@user = FactoryGirl.build(:user)
@user.has_role? :admin
@user.add_role "admin"
@user.save
@user.has_role? :admin
@user = FactoryGirl.build(:user)
@user.has_role? :admin
@user.has_role :admin
@user.has_role :adminexpect{@user.send(:become_admin!)
@user.has_role :adminexpect{@user.send(:become_admin!)}
@user
FactoryGirl.create(:user)
@user.has_role? :admin
@user.has_role?
@user.has_role
@user.has_role? :admin
FactoryGirl.create(:user)
@user
@user.has_role? :admin
{ expect{@user.send(:become_admin!)}
it { expect{@user.send(:become_admin!)}.to_not change{@user.has_role? :admin } }
@user = User.from_omniauth(request.env["omniauth.auth"])
@user.persisted?
@user.
@user
@user.persisted?
@auth = double( 'auth',
  provider: 'google_oauth2',
  uid: '107682192994779282944',
  info: @auth_info
)
@organization = FactoryGirl.create(:organization)
@auth_info = double( 'info',
  name: Faker::Name.name,
  email: Faker::Internet.email
)
@auth_info = double( 'info',
  name: Faker::Name.name,
  email: Faker::Internet.email
)
@auth = double( 'auth',
  provider: 'google_oauth2',
  uid: '107682192994779282944',
  info: @auth_info
)
@admin = FactoryGirl.create(:user, add_role(:admin))
@admin = FactoryGirl.create(:user, add_role :admin)
@admin = FactoryGirl.create(:user)
@admin = FactoryGirl.create(:user, admin:true)
@admin = FactoryGirl.create(:user, admin: true)
@admin = FactoryGirl.create(:user, add_role: true)
@admin = FactoryGirl.create(:user, :admin)
@admin = FactoryGirl.create(:user, (add_role: admin))
@admin = FactoryGirl.create(:user, add_role(:admin))
@admin = FactoryGirl.create(:admin)
stock_prices
stock_prices[0]
stock_prices[idx..-1]
stock_prices
stock_prices[idx..-1]
stock_prices
stock_prices[idx..-1]
User.create!
User.create!(name: "Saroar", email: saroar@g.com, passwprd: password)
User.create!(name: "Saroar", email: saroar@g.com, passwprd: "password")
User.create!(name: Saroar, email: saroar@g.com, passwprd: password)
reload!
User.create!
User.create!({name: "Name", :email => "guy@gmail.com" :password => "111111", :password_confirmation => "111111" })
User.create!({:name => "Name", :email => "guy@gmail.com" :password => "111111", :password_confirmation => "111111" })
User.create!({:name => "Name", :email => "guy@gmail.com", :password => "111111", :password_confirmation => "111111" })
user_signed_in_with_token?
auth_current_user.present?
@auth_current_user
User.find_by(auth_token: request.headers['Authorization'])
User
current_user
User.find_by(auth_token:p8PKdYztxNENewDxY8Cm)
User.find_by(auth_token: p8PKdYztxNENewDxY8Cm)
User.find_by(:auth_token =>  "p8PKdYztxNENewDxY8Cm")
User.find_by(auth_token: request.headers['Authorization'])
num
num.lenth
num.length
num.size
num.count
num.size
num..length
num.length
num.to_ilength
num.to_i.length
reload!
num
num.num_digits
puts Math.log10(1234).to_i + 1 
num.num_digits
num_digits
num_digits(num)
num.num_digits
num
num.slit
num.slit(,)
num.slit(' ',',')
num.slit(' ')
num
num.bit_length
num.abs
num.abs.each {|i| return i if (n / 10).zero? }
num.each {|i| return i if (n / 10).zero? }
num.map {|i| return i if (n / 10).zero? }
num.mep {|i| return i if (n / 10).zero? }
Math.log10(num).to_i + 1
num.to_s[0..(num_length / 2 - 1)]
num.to_s[0..(num_length / 2)]
num.to_s[0..(num_length / 2)].split(',')
num.to_s[0..(num_length)].split(',')
num.to_s.scan(/.../).map {|e| e.to_i }
num
num.to_s.scan(/.../).map {|e| e.to_i }
num.to_s.scan(/.../).map {|e| e.to_i }[0]
num.to_s.scan(/.../).map {|e| e.to_i }
num
num.to_s.scan(/.../).map {|e| e.to_i }
num.each_char.each_slice(3).map{|x| x.join}
num.to_s.each_char.each_slice(3).map{|x| x.join}
num.to_s[0..(num_length / 2)]
num.to_s.scan(/.../).map {|e| e.to_i }
num.to_s.each_char.each_slice(2).map{|x| x.join}
num.to_s.each_char.each_slice(num_length/ 2).map{|x| x.join}
num.to_s.each_char.each_slice(num_length/ 2).map{|x| x.join}.last
num.to_s.each_char.each_slice(num_length/ 2).map{|x| x.join}.last.split('')
num.to_s.each_char.each_slice(num_length/ 2).map{|x| x.join}.last.split('').reduce(&:+)
num.to_s.each_char.each_slice(num_length/ 2).map{|x| x.join}.last.reduce(&:+)
num.to_s.each_char.each_slice(num_length/ 2).map{|x| x.join}.last.map(&:to_i).reduce(&:+)
num.to_s.each_char.each_slice(num_length/ 2).map{|x| x.join}
num.to_s.each_char.each_slice(num_length/ 2)
num.to_s.each_char.each_slice(num_length/ 2).map{|x| x.join}
even_nums
even_nums = num.to_s.each_char.each_slice(num_length/ 2).map{|x| x.join}
even_nums
even_nums.map { |str| str.chars.inject(0){|s,x| s+= x.to_i } }
even_nums.map { |str| str.chars.inject(0){|s,x| s+= x.to_i } }.first
User.lass
User.all
exit
User.where(email: auth.info.email).first
User.where(provider: auth.provider, uid: auth.uid).first
User.last
User.all
User.where(provider: auth.provider, uid: auth.uid).first
User.where(email: auth.info.email).first
User.where(email: auth.info.email)
User.last
auth
provider
auth.provider
User.where(provider: auth.provider, uid: auth.uid).first
User
auth.provider
auth
auth.provider
auth
auth.provider
auth.uid
User.where(provider: auth.provider, uid: auth.uid).first
User.where(email: auth.info.email).first
auth
User.where(provider: auth.provider, uid: auth.uid).first
provider
User
User.where(uid: auth.uid)
auth
User.where(provider: auth.provider, uid: auth.provider).first
User.where(provider: auth.provider, uid: auth.provider).first.nil?
select
select.find(:xpath, 'option[2]').select_option
select.find(:xpath, 'option[1]').select_option
menu
items
item
menu
Menu.all
Menu.items
Menu.items.all
Menu.items
Menu.whre(id: q)
Menu.whre(id: 1)
Menu.whre(:id => 1)
Menu.all
Menu.where(id: 1)
Menu.where(id: 1).items
Menu.where(id: 1).all
Menu.where(id: 1).inspect
Menu.where(id: 1)
Menu.where(id: 1).items
Menu.first
Menu.first.items
Menu.first.items[0]
ft
Menu.first.items
Menu.first
Menu
Menu.first.items
Menu.all
Menu.all.html_safe
Menu.all.html_sace
Menu.all.html_save
Menu.all.html_safe?
Menu.all
Menu
Menu.where(:id => 1)
Menu.first.items[0]
Items
Items.all
select.find(:xpath, 'option[1]').select_option
select.find(:xpath, 'option[2]').select_option
select
Menu.first.items
Items
Item
items
Menu.items
Menu
Menu.all
select.find(:xpath, 'option[2]').select_option.click
select.find(:xpath, 'option[2]').select_option
select.find(:xpath, 'option[1]').select_option
select.find(:xpath, 'option[2]').click
select.find(:xpath, 'option[1]').select_option
expect(select.find(:xpath, 'option[2]').select_option).to eql('selected')
select.find(:xpath, 'option[1]').select_option
expect(select.find(:xpath, 'option[2]').select_option).to eql('selected')
select.find(:xpath, 'option[1]').select_option
select.find(:xpath, 'option[2]').click
expect(select.find(:xpath, 'option[2]').select_option).to eql('selected')
select.find(:xpath, "//select[@id='" + select + "']/option").click
select.find(:xpath, "option[1]").click
select.find(:xpath, "option[2]").click
select.find(:xpath, "option[2]")
select.find(:xpath, "option[2]").select
select.find(:xpath, "option[2]").select_option
select.find(:xpath, "option[2]").click
select.find(:xpath, 'option[1]').select_option
expect(select.find(:xpath, 'option[2]').select_option).to eql('selected')
select.find(:xpath, 'option[2]').select_option
expect(select.find(:xpath, 'option[2]').select_option).to eql('selected')
select
option[1]
select.find(:xpath, 'option[1]')
order_item_ids
all('select')
select.find(:xpath, 'option[1]').select_option
select(:xpath, 'option[1]').select_option
has_select?(select.find(:xpath, 'option[2]', selected: selected).select_option)
has_select?(select.find(:xpath, 'option[2]', select: selected).select_option)
has_select?(select.find(:xpath, 'option[2]', select: select).select_option)
has_select?(select.find(:xpath, 'option[2]', select: select))
has_select?(select.find(:xpath, 'option[2]', select: select))has_select?(select.find(:xpath, 'option[2]').select_option, selected: selected)
has_select?.(select.find(:xpath, 'option[2]').select_option, selected: selected)
has_select.(select.find(:xpath, 'option[2]').select_option, selected: selected)
has_select?.(select.find(:xpath, 'option[2]').select_option, selected: selected)
has_select?.(select.find(:xpath, 'option[2]').select_option, select: selected)
has_select?(select.find(:xpath, 'option[2]').select_option)
select.find(:xpath, 'option[2]')
select.find(:xpath, 'option[2]').select_option
expect(select.find(:xpath, 'option[2]').select_option).to eql("selected")
select.find(:xpath, 'option[2]').select_option
find(:xpath, 'option[2]').select_option)
find(:xpath, 'option[2]').select_option
expect(select.find(:xpath, 'option[2]').select_option).to eql("selected")
page.select 'select.find(:xpath, 'option[2]').select_option', from: 'selected'
expect(select.find(:xpath, 'option[2]').select_option).to
expect(select.find(:xpath, 'option[2]').select_option)
select.find('option[2]').click
select.find(:xpath, 'option[1]').click
expect(select.find(:xpath, 'option[2]').select_option)
input
ARGV[0]
input.length / 2
input.length
input.length / 2
input.length % 2 != 0
input[0..center-1].to_i
num1 = input[0..center-1].to_i
exit
Menu.first.items[1]
Menu.first.items
find('#organizationSelect').find(:xpath, 'option[2]').select_option
select "option1", from: "menuSelect"
select "option1", from: "select"
select "option1", from: "selected"
select "option1", from: Menu.first.items.all
option1
option
option2
select "option1", from: Menu.first.items.all
option1
option1.id
select "option1.id", from: Menu.first.items.all.ids
find('select').find('option1.id').select_option
option1.id
find('select').find('option1.id')
select
select[1]
select 'option1[1]'
select 'option1[1]', from: Menu.first.items.all
select 'option1[1]', from: Menu.first.items[1]
select(option, from: option1)
select(option, from: option1.id)
select(option.ids, from: option1.id)
select("option.ids", from: option1.id)
select("option.ids", from: "option1.id")
option1.id
option.ids
find("option1.id", from: Menu.first.items.all).select_option
find("option1.id", text: Menu.first.items.all).select_option
find("option[0]", text: Menu.first.items.all).select_option
option[value='1']
option[value='']
option[value='id']
option
option[0]
option[value=id]
option[value=0]
find(option[value=id], from: Menu.first.items.all).select_option
find("option[value=id]", from: Menu.first.items.all).select_option
find("option[value=id]", text: Menu.first.items.all).select_option
option1.name[0]
option1.name
Menu.first.items.all
Menu.first.items.all.name
Menu.first.items.all.names
Menu.first.items.all.ids
Menu.first.items.all[1]
Menu.first.items.all
Menu.first.items.all.names
Menu.first.items.all.name
Menu.first.items.all.ids
select 'option1.id', from: Menu.first.items.all.ids
select_from_box 'option1.id', from: Menu.first.items.all.ids
select("option1.id", from: ""option)
select("option1.id", from: "option")
select("option1.id", from: "option.ids")
select("option1.id", from: option.ids)
select(option1.id, from: option.ids)
select(option1.id, from: 83)
select option.id
select option.id, from: :option
select option1.id, from: :option
select option1.id, from: option.ids
select option1.id, from: option.ids, visible: false
find(:xpath, 'option[1]').select_option
all('select')find(:xpath, 'option[1]').select_option
all('select').find(:xpath, 'option[1]').select_option
find(:xpath, 'option[1]').text
select_from_box 'option1.id', from: Menu.first.items.all.ids
page.select 'option1', from: option.ids
page.select 'option1', from: :option.ids
page.select 'option1', from: :option
page.select 'option1', from: option
page.select 'option1', from: option.ids
page.select 'option1', :from(option.ids)
page.select 'option1', :from(option)
page.select 'option1', :from("option")
page.select 'option1', :from(:option)
page.select 'option1', :from => option1
page.select 'option1', :from => option.ids
page.select 'option1', :from => option1.id
page.select 'option1', :from => option1.ids
page.select 'option1', :from => option1
page.select 'option1', :from => option.ids
page.select 'option1.id', :from => option.ids
select_from_box
select 'option1.id', from: Menu.first.items.all.ids
select('option1.id', from: Menu.first.items.all.ids)
select('option1.id', from: Menu.first.items.all.ids).click
select_from_box
select_from_box('option1.id', from: Menu.first.items.all.ids)
select_from_box('option1.id', from: Menu.first.items.all.ids).click
select_from_box('option1.id', from: Menu.first.items.all.ids)
select_from_chosen('option1.id', from: Menu.first.items.all.ids)
select_from_box('option1.id', from: Menu.first.items.all.ids)
select_from_box('option1.id', from: option.ids)
select_from_box('option1.id', from: 83)
select_from_box('option1.id', from: )
select_from_box('option1.id', from: option1.id)
option1.id
select.find(:xpath, 'option[2]').select_option
select_from_box(:xpath, 'option[2]')
select_from_box(83, 'option[2]')
select(:xpath, 'option[2]')
select(:xpath, 'option[2].to_s')
find(option[value='2']).click
find(option[value=2]).click
find('#order_item_ids').find(:xpath, 'option[2]').select_option
find('#order_item_ids').find(:xpath, 'option[value="2"]').select_option
find('#order_item_ids').find(:xpath, option[value="2"]).select_option
find('#order_item_ids').find(:xpath, option[value="2"]).click
find('#order_item_ids').find(:xpath, 'option[2]').click
find('#order_item_ids').find(:xpath, ).click
find('#order_item_ids').find(:xpath, 'option[2]').select_option
find('#order_item_ids')
find('#order_item_ids')[1].click
all('#order_item_ids')[1].click
all('#order_item_ids')[2].click
all('#order_item_ids')[3].click
all('#order_item_ids')[0].click
all('#order_item_ids')
all('#order_item_ids').first.click
all(:xpath, '//a[text()="#order_item_ids"]').first.click
all('#order_item_ids').first.click
first('#order_item_ids').click
all('#order_item_ids').click
all('#order_item_ids')
all('#order_item_ids')[0]
find(:xpath, 'option[2]').select_option
find('#order_item_ids', 'option[2]').select_option
find('#order_item_ids', 'div[2]').select_option
find('#order_item_ids', 'div[1]').select_option
all('#order_item_ids')[0]
find('#order_item_ids', 'div[1]').select_option
find('#order_item_ids',).select_option
find('#order_item_ids', 'div[1]').click
select 'option1.id', from: option.ids
select 'option1.id', :from => option.ids
find(option1.id, option.ids).click
find(:option1.id, option.ids).click
find(:id, option.ids).click
find(83, option.ids).click
find('option1.id', option.ids).click
find('#order_item_ids', option.ids).click
find('#order_item_ids', 'option value="2"').click
find('select').find(:xpath, 'option[2]').select_option
page.find('select').find('option[2]').select_option
page.find('select').find('option[2]').click
page.find('select').click
page.find('select')
page.find('selected')
page.find('select')
choose(option1.id)
select(option1.id)
find('xpath/css').click
find('#order_item_ids').click
find('#order_item_ids').first.click
find('#order_item_ids')[0].click
find('#order_item_ids').click
choose(option1.id)
select(option1.id)
select(option1.id, from: Items.all)
select(option1.id, from: Item.all)
select(option1.id, from: Item.all.ids)
page.select 'option1.ids', from: option.ids
find('subject_id').find("option[value='29']").click
find('#order_item_ids').find("option[value='2']").click
page.select 'option1.ids', from: option.ids
page.select 'option1.id', from: option1.id
find('#order_item_ids').find("option[value='2']").select_option
find('#order_item_ids').find("option[value='2']").select
find('#order_item_ids').find("option[value='2']")[0].click
all('select').find(:xpath, 'option[2]').select_option
select.find(:xpath, 'option[2]').select_option
find(:xpath, 'option[2]').select_option
find('#order_item_ids', 'option[2]').select_option
find('#order_item_ids', "option[value='2']").select_option
find('order_item_ids', "option[value='2']").select_option
find("#order_item_ids", "option[value='2']").select_option
find("#order_item_ids", "option[value="2"]").select_option
find("#order_item_ids", 'option[value="2"]').select_option
find("#order_item_ids", 'option[value="2"]').click
find("#order_item_ids", 'option[value="1"]').click
find("#order_item_ids", 'option[value="3"]').click
page.select 'option1.id', from: Item.all.ids
page.select 'option1.id', from: Item.all
select(option1.id, from: option.ids)
exit
Menu.first.items
Menu.first.items[0]
Menu.first.items
Menu.first
Menu.first.items
Menu.first.items[0]
Items
Item
Item.all
Item.id
Item.id[0]
Item.id[4]
Item.id[2]
Item.ids[2]
User.all
exit
u = User.new
user = User.last
user.add_role 'admin'
a = Ability.new(user)
a.can? :manage, all
a.can? :manage, :all
u.save
u.save!
user.save!
clear
User.last
User
clear
User.last
exit
User.all
clear
select(option1.id), from: option.ids
select "option1.id", from: option.ids
Blog.all
Blog
Blogs
User
Blog
reload!
Blog.all
reload!
Blog.find 1
Blog.all
Blog.all.destroy_all
Blog.find 1
Blog.find(params[:id])
Blog.all.destroy_all
exit
select(option1.id, from: option.ids)
Order.all
Order.all.destroy_all
exit
choose(option1)
choose(option1.id)
find(option1.id)
choose(option1)
ckeck(option1.id)
check(option1.id)
check("order_item_ids_1")
check("option1.id")
check(option1.id)
find(:css, "#order_item_ids_1[value='1']").set(true)
find(:css, "#order_item_ids_1").set(true)
page.check('option1.id')
page.check(option1.id)
page.check('value="1"')
page.check
find("#order_item_ids_1").set(true)
find("option[value='1']")
find("option[value='1']").click
select 'option1.id', from: 'option.ids'
select 'option1.id', from: 'option.ids
select 'option1.id', from: option.ids
all(option.ids)[2].select_option
all('#foo option')[2].select_option
find("option[value='Personal']").click
find("option[value='1']").click
find('//table/tr').click
find('#order_item_ids').click
find('#order_item_ids')[1].click
find('#order_item_ids')[1]
Blog.all
reload!
Blog.all
Blog.find 2
exit
Blog.all,destroy_all
Blog.all.destroy_all
clear
Order.all.destroy_all
exit
find(:css, "#order_item_ids_2").set(false)
all('select').find(:xpath, 'option[2]').select_option
all('select').find('option[2]').select_option
all('select').find('option[2]')
all('select').find('option[2]').set(true)
all('select').find('option[2]').click
all('select').find('option[2]').set
all('select').find('option[2]').set(true)
find('option[2]').set(true)
find('option[2]')
find('order_item_ids_2')
check('order_item_ids_2')
find(:xpath, "//input[@value='2']").set(true)
find(:xpath, "//input[value='2']").set(true)
find(:css, "#cityID[value='62']").set(true)
find(:css, "#order_item_ids_2[value='2']").set(true)
find(:css, "#order_item_ids_2[@value='2']").set(true)
find(:css, "#order_item_ids_2[value='2']").set(true)
find("#order_item_ids_2[value='2']").set(true)
page.check('order_item_ids_2')
page.check()
page.check('')
all('select').each do |select| select.find(:xpath, 'option[1]').select_option end
all('select').each do |select| select.find(:xpath, 'option[2]').select_option end
select.find(:xpath, 'option[1]').click
select.find(:xpath, 'option[2]').click
select.find(:xpath, 'option[2]').set(true)
select.find(:xpath, 'option[1]').select_option
select.find(:xpath, 'option[1]').se
o1 = select.find(:xpath, 'option[1]').select_option
o1
o2 = select.find(:xpath, 'option[1]').select_option
01
o1
o1o2
o2
o2 = select.find(:xpath, 'option[1]').unselect_option
o2
o1
o1.unselect_option
o1.nil
o1
o2
o3
select.find(:xpath, 'option[1]').unselect_option
select.find(:xpath, 'option[2]').select_option
o3
o3 = nil
o3
expect(o2).to eql('selected')
o1
select.find(:xpath, 'option[2]')
select.find(:xpath, 'option[2]').nil?
fmi
select
User.la
User.all
u = User.last
user.add_role "admin"
u.add_role "admin"
ability = Ability.new(u)
ability.can? :manage, :all
u.save
clear
user = User.last
user.add_role "admin"
ability = Ability.new(user)
ability.can? :manage, :all
user.save
celar
Posts.all.destroy_all
Post.all.destroy_all
clear
all
where(nil)
celar
query
search(query)
search
search(query)
Post.last
css_class
@tags
Post.tag_list
Post.last.tag_list
month
month.year
month.inspect
month.try(:year)
month
Date.parse(month).strftime('%B, %Y')
id
User.find)by(id)
User.find_by(id)
User.find_by(ids)
User.find_by(id)
User.find_by(561)
User.all
User.find_by(user.id)
user.id
User.find_by_id()
User.find_by_id(id)
User.find_by_id(id).username
User.find_by_id(id)
User.find_by_id(id).username
User.find_by_id(id)
User.find_by_id(id.username)
User.find_by_id(id)
User.find_by_id(id).username
User.find_by_id(id)
User.find_by_id(username)
User.find_by_id(id)
User.find_by_id(id).username.to_s
User.find_by_id(user.id).username
User.find_by_id(id).username
User.all.find_by(user.id)
User.all.find_by(id)
User.find_by(id: user.id)
User.find_by(id: id)
User.find_by(id: id.username)
User.find_by(id: id).username
User.find_by_id(id).update_attributes(id:id, password_digest: password_digest)
Post.all
Post.last
require 'irbtools'
Post.last
require 'irbtools'
Post.all
clear
require "irbtools"
hi
Post.last
require "irbtools"
provider
require "irbtools"
Comment.all
Post.last
Post.comment
Comment.last
Comment.find 251
c = Comment.last
c.post_id
c.post_id.user
c.post_id
c.post
c.post_id
Post.find 251
p = Post.find 251
p.comment
p.comment_id
p
require "irbtools"
Comment.last
Comment.all_destroy_all
Comment.all.destroy_all
clear
Post.comments.last
Post.comment.last
Post.comment
require "irbtools"
Comment.all
@post.category
@post.category.id
@post.category.id.posts
@post.category.id.post
@post.category.title
@post.category.name
@post.category.name.posts
@post.category.id
@post.category.id.posts
pc = @post.category.id
pc
pc.posts
pc.inspects
pc.inspect
pc
posts
@post
@post.category_id
@post.category_id.posts
Category.all
Category.posts
Category.posts.each {}
Category.post
Category.posts
Category.id(2).posts
Category.find_by_id(2)
Category.find_by_id(2).posts
Category.find_by_id(2).posts.map { |c| c.title}
@post}
@post
@post.id
@post.category.id
require "irbtools"
Category.last
Post.find 252
p = Post.find 252
p.categpry_id
p.catrogry
p.category
p.category.name
p = Post.find 252
p.category
p.category.all
p.category.ids
p.category.id
c = Cateogry.find 2
c = Category.find 2
c.post
c.posts
c.posts.title
c.posts.map {|c| c.title }
Post.frindly.find.all
reload!
Post.frindly.find.all
Post.find_each(&:save)
Post.last
last_name
first_name
last_name.presence?
last_name.nil?
first_name.blank?
errors.add(:last_name, "Specify a first or a last.")
last_name.blank?
first_name.blank?
errors.add(:last_name, "Specify a first or a last.")
last_name.blank?
first_name.blank? 
gender.male?
gender
gender == "male"
gender == "male" && first_name == "Jue"
gender == "male"
first_name == "Jue"
first_name
first_name == "Jue"
first_name == "Sue"
todo_lists.count
self
self.todo_list
self.todo_lists
self.todo_lists.todo_items
self.todo_lists.count
self.todo_lists.inspect
self.todo_lists
self.todo_tems
self.todo_lists
self.todo_item
self.todo_items
self.todo_items.count
todo_items
todo_items.where(completed: true).count
min_birth_year
birth_year
max_birth_year
Profile.where(:min_birth_year, :max_birth_year).order('birth_year ASC')
Profile.inzpecr
Profile.inspect
birth_year
Profile.where(:Profile.where(:min_birth_year, :max_birth_year).order('birth_year ASC') => min_birth_year..max_birth_year).order('birth_year ASC')
Profile.where(:birth_year => min_birth_year..max_birth_year).order('birth_year ASC')
@todo_items
@todo_items.todo_list
@todo_item
params
@todo_ites
@todo_items
@todo_item
TodoList.find(params[:todo_list_id])
@todo_list
@todo_list.todo_items
@todo_list.todo_items.title
@todo_list.todo_items_id
@todo_list.todo_items
<p>
<strong>Title:</strong>
<%= @todo_item.title %>
</p>
<p>
<strong>Due date:</strong>
<%= @todo_item.due_date %>
</p>
<p>
<strong>Description:</strong>
<%= @todo_item.description %>
</p>
<p>
<strong>Completed:</strong>
<%= @todo_item.completed %>
</p>
params
TodoList.find(params[:id])
TodoList.itemsfind(params[:id])
TodoList.items
TodoList.todo_items
TodoList.todo_items.find(params[:todo_list_id, :id])
TodoList.todo_items.find(params[:todo_list_id])
TodoList.find(params[:todo_list_id])
TodoList.find(params[:todo_list_id, :id])
TodoList.find(params[:todo_list_id], params[:id])
TodoList.
TodoList
TodoList.inpect
TodoList.inspect
list_id=TodoList.first.id
@todo_list=TodoList.find(list_id)
item_id=@todo_list.todo_items.first.id
@todo_item=@todo_list.todo_items.find(item_id)
@todo_item = @todo_list.todo_items.find(params[:todo_list_id])
@todo_list = TodoList.find(params[:id])
TodoList.all
TodoList.all.last
TodoList.all.last.todo_items.last
TodoList.find(params[:todo_list_id]).todo_items.find(params[:id])
TodoList.todo_items.find
TodoList.todo_items
TodoList
TodoList.todo_items.find(params[:id])
TodoList.todo_items.last
TodoList.last
TodoList.last.todo_items.last
todo_item_params
@todo_list.update(todo_item_params)
@todo_list.update(title: 'hi')
@todo_list.updates(title: 'hi')
@todo_list.update_attributes(title: 'hi')
@todo_list.update_attribute(title: 'hi')
@todo_list.update_attributes(title: 'hi')
@todo_list.update(title: 'hi')
@todo_list
@todo_item.update(todo_item_params)
@todo_item.update(title: 'hi')
todo_item_params
@todo_item.update_attributes(todo_item_params)
@todo_item
@todo_items
@todo_item
@todo_item.update_attributes(todo_item_params)
@todo_item.todo_lists
@todo_item.todo_list
@todo_item
@todo_list
@todo_list.todo_items
@todo_list.todo_items.update
@todo_list
@todo_list.todo_list
@todo_list.todo_item
@todo_list.todo_items
@current_user
User.find(session[:user_id])
User.find(session[:user.id])
User.find(session[:id])
User.last
session
session(params[:user_id])
User.find(session[:user_id])
@current_user ||= User.find(session[:user_id])
current_user.todo_lists.find(params[:id])
current_user.todo_lists.find(params[:id])params
params
current_user
aaifd.company.website
aaifd.company.contact_number
aaifd.company.address
data
sheet.add_row [labels.last, data.last]
sheet.add_row [data.last]
labels
labels.last
c
c.company
c.company.comapny_name
c.company.map(&:comapny_name)
c.company.mep(&:comapny_name)
c.company.each(&:comapny_name)
c.company.collect(&:comapny_name)
c.company
c.company.email
c.company.company_name
Company.all
Company.all.company_name
Company.where
Company.where(:company_name)
Company.where(company_name)
Company.all.where(company_name: company_name)
Company.all.where(company_name: nil)
Company.all.where.not(company_name: nil)
Company.all.where
Company.all.where[0]
Company.all.where[1]
Company.all.where("comapny_name")
Company.all.where(comapny_name: "company_name")
c.company_name
c
c.id
Company.where(company_name: c.company_name)
Company.where(company_name: c)
c.company_name
we
we.worke_estimate
we.worke_estimatework_estimate
work_estimate
work_estimate_id
we.work_estimate
@todo_list, todo_item
@todo_list
todo_item
User.all
SubWorking.all.map {|s| s.sub_working_title }
SubWorking.all.map {|s| s.sub_working_title }[0]
Specialist.all
SubWorking.all.map {|s| [s.id, s.sub_working_title] }
current_user.todo_lists.find(params[:todo_list_id])
current_user.todo_lists.find(params[:id])
TodoLists.find(params[:todo_list_id])
TodoList.find(params[:todo_list_id])
Todo_list.find(params[:todo_list_id])
TodoList.find(params[:todo_list_id])
@todo_list.todo_items.new(todo_item_params)
@todolist
TodoList
current_user
current_user.todo_list.todo_items.new(todo_item_params)
current_user.todo_list
current_user.todo_lists
current_user.todo_list
current_user.todo_items
@todo_list.todo_items.new(todo_item_params)
Todolist.todo_items.new(todo_item_params)
@todo_item
current_user
current_user.todo_items
current_user.todo_lists.todo_item
current_user.todo_lists.todo_items
current_user.todo_lists.todo_item
current_user.todo_lists.todo_items
current_user.todo_items
current_user.todo_items.new
current_user.todo_items.new(todo_item_params)
reload!
current_user.todo_items.new(todo_item_params)
@todo_list.todo_items.new
@todo_list.todo_items.new(todo_item_params)
params
@todo_list.todo_items.new(todo_item_params)
class TodoItemsController < ApplicationController
  before_action :set_todo_list, only: [:new, :create, :show, :edit, :update, :destroy]
  before_action :set_todo_item, only: [:show, :edit]
  # GET /todo_items/1
  # GET /todo_items/1.json
  def show
  end
  # GET /todo_items/new
  def new
    @todo_item = @todo_list.todo_items.new
  end
  # GET /todo_items/1/edit
  def edit
  end
  # POST todo_list/todo_items
  # POST todo_list/todo_items.json
  def create
    @todo_item = @todo_list.todo_items.new(todo_item_params)
    respond_to do |format|
      if @todo_item.save
        format.html { redirect_to todo_lists_url, notice: 'Todo item was successfully created.' }
        format.json { render :show, status: :created, location: todo_lists_url }
      else
        format.html { render :new }
        format.json { render json: @todo_list.errors, status: :unprocessable_entity }
      end
    end
  end
  # PATCH/PUT todo_list/todo_items/1
  # PATCH/PUT todo_list/todo_items/1.json
  def update
    respond_to do |format|
      @todo_item = @todo_list.todo_items.find(params[:id])
      if @todo_item.update(todo_item_params)
        format.html { redirect_to @todo_list, notice: 'Todo item was successfully updated.' }
        format.json { render :show, status: :ok, location: @todo_list }
      else
        format.html { render :edit }
        format.json { render json: @todo_list.errors, status: :unprocessable_entity }
      end
    end
  end
  # DELETE /todo_items/1
  # DELETE /todo_items/1.json
  def destroy
    @todo_list.destroy
    respond_to do |format|
      format.html { redirect_to todo_lists_url, notice: 'Todo item was successfully destroyed.' }
      format.json { head :no_content }
    end
  end
  private
  # Use callbacks to share common setup or constraints between actions.
  def set_todo_item
    @todo_item = current_user.todo_items.find(params[:id])
  end
  def set_todo_list
    @todo_list = TodoList.find(params[:todo_list_id])
  end
  # Never trust parameters from the scary internet, only allow the white list through.
  def todo_item_params
    params.require(:todo_item).permit(:title, :due_date, :description, :completed)
  end
end
TodoList.find(params[:todo_list_id])
TodoList.current_user
current_user.todo_lits
current_user.todo_list
current_user.todo_lists
calculate.sub_total
calculate.sub_total(&:calculate.sub_total)
calculate.sub_total(&:sub_total)
calculate.(&:sub_total)
calculate(&:sub_total)
calculate(&:+sub_total)
calculates
calculate
calculates
calculate
calculate.sub_total
calculate
calculate.rate
calculate.sub_total
calculate
calculate.count
calculate.size
calculate
calculates.all
calculate.all
calculate.sub_total
we.calculates.all
we.calculates.count
we.calculates.sub_total.count
we.calculates.sub_total
we.calculates.all.map {|c| c.sub_total }
we.calculates.all.map {|c| c.sub_total.inject(:+) }
we.calculates.all.map(&:sub_total).inject(0,:+)
we.calculates.all.map(&:sub_total).inject(:+)
we
we.calcultes
we.calculates
we.calculates.map(&:sub_total)
we.calculates.map(&:sub_total).inject(:+)
self.stage_total
self
working_extimate
WorkingEstimate
WorkingEstimate.stage_total
w = WorkingEstimate.new
w.sub_total
w.stage_total
self.map(&:stage_total).inject(:+)
self
WorkingEstimate.all
WorkingEstimate.all.map {|we| we.total_cost_of_project(&:stage_total).inject(:+)}
we
WorkingEstimate.all.map {|we| we.total_cost_of_project(&:stage_total).inject(:+)}
WorkingEstimate.all.map {|we| we }
WorkingEstimate.all.map {|we| we.stage_total }
WorkingEstimate.all.map {|we| we.stage_total(:+) }
WorkingEstimate.all.map {|we| we.stage_total }
WorkingEstimate.all.map {|we| we.total_cost_of_project }
WorkingEstimate.all.map {|we| we.stage_total }
WorkingEstimate.all.map(&:stage_total).inject(:+)
current_user
current_user.id
current_user.id == user.is
current_user.id == user.id
current_user.id == user_id
user_is
user
User
User.current_user
user.id
user_id
Post.last.user_id
Post.last.user_id == current_user.id
Post.last.user.email
current_user.email
@posts.user.id
@posts.user
@posts.users
@posts
@posts.user_id
@posts.user_ids
@posts.user_id
current_user.has_role? :admin
user.has_role? :admin
user
current_user
user
WorkingEstimate
WorkingEstimate.last
WorkingEstimate.all
@post
Post.published.friendly.find(params[:id])
Post.friendly.find(params[:id])
Post.friendly.find(params[:id])Post.friendly.find(params[:id])
Post.friendly.find(params[:id])
@post = Post.friendly.find(params[:id])
@post = Post.published.friendly.find(params[:id])
Post.published.friendly.find(params[:id])
Post.friendly.find(params[:id])
Post.friendly.find(params[:id]).published
Post.friendly.find(params[:id])
published
Post.published
Post.published@post
@post
Post.published.friendly.find(params[:id])
Post.published
Post.published.friendly.find(params[:id])
Post.friendly.find(params[:id]).published
Post.friendly.find(params[:id])
Post.find(params[:id])
Post.find id
Post.find(params[:id])
Post.friendly.find(params[:published])
Project.all
Project.all.start_date
Project.find(1)
Project.find(1).start_Date
Project.find(1).start_date
Project.find(1).start_date.strftime("%d")
Project.find(1).start_date.strftime("%m")
Project.find(1).start_date.month
Project.find(1).start_date.strftime("%B")
Project.all.map(&:start_date.strftime("%B"))
Project.all.map(&:start_date)
Project.all.map(&:start_date).strftime("%B")
Project.all.map(&(:start_date.strftime("%B")))
Project.all.map {|pro| pro.strftime("%B")}
Project.all.map {|pro| pro.start_date.strftime("%B")}
Array(proj.start_date.strftime("%B").to_i..proj.end_date.strftime("%B").to_s)
Array(proj.start_date.strftime("%B").to_i..proj.end_date.strftime("%B"))
proj.start_date.strftime("%B").to_i..proj.end_date.strftime("%B")
proj
proj.start_date
proj.start_date.strftime("%B")
proj.start_date.strftime("%B")..proj.end_date.strftime("%B")
proj.start_date.strftime("%B")..proj.end_date.strftime("%B").to_s
date_months = proj.start_date.strftime("%B")..proj.end_date.strftime("%B")
reload!
Project.project_months_range 
Project.project_months_range(start_date, end_date)
Project.project_months_range(:start_date, :end_date)
self.start_date
Project.all
Project.all.map {|p| p.start_date }
reload!
self.start_date..self.end_date
pro.start_date..pro.end_date
pro.start_date
proj.start_date
proj.start_date..proj.end_date
month_range = proj.start_date..proj.end_date
month_range.map {|d| Date.new(d.year, d.month, 1)}.uniq
date_months.map {|d| d.strftime("%B") }
date_months = month_range.map {|d| Date.new(d.year, d.month, 1)}.uniq
date_months.map {|d| d.strftime("%B") }
Project.project_months_range
date_months.map {|d| d.strftime("%B") }
month_range = proj.start_date..proj.end_date
date_months = month_range.map {|d| Date.new(d.year, d.month, 1)}.uniq
date_months.map {|d| d.strftime("%B") }
date_months.each {|d| d.strftime("%B") }
date_months.all.map {|d| d.strftime("%B") }
date_months.map {|d| d.strftime("%B") }
reload!
all
all do
month_range = proj.start_date..proj.end_date
date_months = month_range.map {|d| Date.new(d.year, d.month, 1)}.uniq
date_months.map {|d| d.strftime("%B") }
date_months.each {|d| d.strftime("%B") }
date_months.map {|d| d.strftime("%B") }
date_months.map {|d| d.strftime("%B") }.to_json
month_range = proj.start_date..proj.end_date
date_months = month_range.map {|d| Date.new(d.year, d.month, 1)}.uniq
date_months = month_range.each {|d| Date.new(d.year, d.month, 1)}.uniq
date_months = month_range.map! {|d| Date.new(d.year, d.month, 1)}.uniq
date_months = month_range.map {|d| Date.new(d.year, d.month, 1)}.uniq
date_months.map {|d| d.strftime("%B") }
date_months.collect {|d| d.strftime("%B") }
reload!
month_range = proj.start_date..proj.end_date
date_months = month_range.map! {|d| Date.new(d.year, d.month, 1)}.uniq
date_months = month_range.map {|d| Date.new(d.year, d.month, 1)}.uniq
date_months.map1 {|d| d.strftime("%B") }
date_months.map! {|d| d.strftime("%B") }
date_months.collect {|d| d.strftime("%B") }
date_months.each {|d| d.strftime("%B") }
date_months = month_range.each {|d| Date.new(d.year, d.month, 1)}.uniq
date_months = month_range.each {|d| Date.new(d.year, d.month, 1)}
date_months.each {|d| d.strftime("%B") }
date_months.map! {|d| d.strftime("%B") }
date_months.map {|d| d.strftime("%B") }
self.project_months_range
self.project_months_range.shift
reload!
pd
pd.days_in_months
pd
reload!
pd
pd.inpect
pd.strftime("%e")
month_range.map {|d| Date.new(d.year, d.month, 1)}.uniq
Date.day.new
Day.new
date_months = month_range.map {|d| Date.new(d.year, d.month, 1)}.uniq
date_months.map {|d| d.strftime("%e") }
proj.start_date..proj.end_date
proj.start_date
proj.start_date.strftime("%e")
proj.start_date.strftime("%e")..proj.end_date.strftime("%e")
month_range proj.start_date.strftime("%e")..proj.end_date.strftime("%e")
month_range = proj.start_date.strftime("%e")..proj.end_date.strftime("%e")
date_months = month_range.map {|d| Date.new(d.year, d.month, d.day, 1)}.uniq
date_months = month_range.map {|d| Date.new(d.day, 1)}.uniq
month_range = proj.start_date..proj.end_date
date_months = month_range.map {|d| Date.new(d.year, d.month, d.day, 1)}.uniq
date_months.map {|d| d.strftime("%e") }
pd
p "#{dd}"
sheet.add_row [p "#{dd}"]
sheet.add_row Project.project_days_range.shift
cop
com
com.input :comapny
com.input :comapny_id
permit_params
params
company__attributes
company
Company.all
Company.last
:end_date
end_date
column :end_date
Project.find(6)
Project.find(6).company
Project.find(6).company_id
Project
Project.last
Project.last.company
Project.last.company.comapny_name
Project.last.company
Project.last.company_name
Project.last.company.company_name
Project.all.map(&:company)
Project.all.map(&:company.company_name)
Project.all.map(&:company)
Project.all.map(&:company).comapny_name
Project.all.map(&:company.company_name)
Project.all.map(&:company_name)
Project.all.map(&:company)
Project.all.map(&:company[o])
Project.all.map(&:company[0])
Project.all.map(&:company.inspect)
Project.all.map(&:company)
Project.all.map {|p| c.company.company_name}
Project.all.map {|p| c.company }
Project.all.map { |p| p.company }
Project.all.map { |p| p.company.comapny_name }
Project.all.map { |p| p.company.company_name }
proj
proj.working_estimates
proj.working_estimates.working_title
proj.working_estimate.working_title
proj.working_estimates.all.each {|pw| pw.working_title}
proj.working_estimates.sub_workings
proj.working_estimates.all.each {|pw| pw.sub_workings}
proj.working_estimates.all.each {|pw| pw.sub_workings 
pwe
pwe.sub_workings
pwe.sub_workings.all.each
sb.specialists.all.map(&:name).shift
sb.specialists.all.map(&:name)
sb.specialists.all.map(&:name).shift
sb.specialists.all.map(&:name).gsup("[]", "")
sb.specialists.all.map(&:name).join(",")
params
we
we.semantic_fields_for :sub_workings
f.semantic_fields_for :working_estimates
we.semantic_fields_for :sub_workings do |sw|
  sw
end
params
pparams
params
f
f.input :working_estimate_ids
f.object.working_estimate_ids
f.object.working_estimate_ids.nil?
WorkingEstimate.new
WorkingEstimate.build
self.attribute
self.attributes
params
Project.find(params[:id])
Project
object
objects
Project.find(params[:id])
Project.find
project
send_file(filename: "#{project.project_name}.xlsx", type: application/xlsx)
project.project_name
project
project.id
we
we.working_title
we.inputs :working_title
we
qOq
we.objectwe.objectwe.objectwe
we.object
=> nil
we.object
f.object
we
we.object
we
we.onject
we.object
we.objects
we.object 
we.object
we.object.all.each
wc
wc.working_title
send_data(filename: "#{project.project_name}.xlsx", type: "application/xlsx")
c
c.company
c.company.name
pwe
pwe.subwokring
pwe.subwokrings
pwe.default_sw_ids
we
we.object
@project.project_working_estimates 
@project.project_working_estimates.where(active: true)
@project.project_working_estimate_ids
@project.project_working_estimates.where(active: true)
@project.project_working_estimate_ids
we
we.object
we
we.object
pro
pro.id
Project.last.active_project_working_estimate_ids
Project.last.active_project_working_estimates
Project.last.active_project_working_estimate_ids
@project.project_working_estimates.map(&:title)
@project.project_working_estimates.map(&:id)
@project.project_working_estimates.map
@project.project_working_estimates.map
@project.project_working_estimates
Project.project_working_estimates.map
Project.project_working_estimates
p = Project.last
p.project_working_estimates
p.project_working_estimates.map(&:title)
p.project_working_estimates.map(&:working_title)
p_title = p.project_working_estimates.map(&:working_title)
p_title = p.project_working_estimates.map(&:working_title)
p.project_working_estimates
reload!
p = Project.last
p.project_working_estimates
p.project_working_estimates.where(active: true)
p.project_working_estimates.map(&:working_title).where(active: true).pluck(:id)
p.project_working_estimates.map(&:working_title).where(active: true)
p.project_working_estimates.map(&:working_title)
p.project_working_estimates.where(active: true)
p.project_working_estimates.where(active: true).working_title
p.project_working_estimates.where(active: true)
p.project_working_estimates.where(active: true).pluck(&:working_title)
p.project_working_estimates.where(active: true).map(&:working_title)
p.project_working_estimates.where(active: true).map(&:working_title)
